// Gemini API Service
import { GoogleGenerativeAI } from "@google/generative-ai";

const API_KEY = import.meta.env.VITE_GEMINI_API_KEY || 'YOUR_GEMINI_API_KEY_HERE'
const genAI = new GoogleGenerativeAI(API_KEY);

export interface GeminiResponse {
  text: string;
}

/**
 * Generate content using Gemini API
 * @param prompt The prompt to send to Gemini
 * @returns Promise with generated content
 */
export const generateContent = async (prompt: string): Promise<string> => {
  // Check if API key is available
  if (!API_KEY || API_KEY === 'YOUR_GEMINI_API_KEY_HERE') {
    console.warn('Gemini API key not configured. Using mock response.')
    // Return a more detailed mock response for development
    return `This is a mock response for the concept: "${prompt.substring(0, 50)}..."\n\nIn a production environment with a valid Gemini API key, this would provide a detailed explanation generated by Google's Gemini AI model. The response would be tailored to the specific concept and difficulty level you selected.`
  }

  try {
    // Using gemini-2.5-flash which is available
    const model = genAI.getGenerativeModel({ 
      model: "gemini-2.5-flash"
    });
    
    const result = await model.generateContent(prompt);
    const response = await result.response;
    const text = response.text();
    
    return text;
  } catch (error: any) {
    console.error('Error generating content with Gemini:', error)
    // Log specific error details
    if (error.message) {
      console.error('Error message:', error.message)
    }
    if (error.code) {
      console.error('Error code:', error.code)
    }
    if (error.details) {
      console.error('Error details:', error.details)
    }
    
    // Return a mock response even in case of errors for better UX
    return `We encountered an issue connecting to the AI service. This is a mock response for the concept: "${prompt.substring(0, 50)}..."\n\nIn a production environment with a valid Gemini API key, this would provide a detailed explanation generated by Google's Gemini AI model.`
  }
}

/**
 * Generate content using Gemini API with streaming
 * @param prompt The prompt to send to Gemini
 * @param onChunk Callback function to handle each chunk of streaming response
 * @returns Promise with complete generated content
 */
export const generateContentStream = async (prompt: string, onChunk: (chunk: string) => void): Promise<string> => {
  // Check if API key is available
  if (!API_KEY || API_KEY === 'YOUR_GEMINI_API_KEY_HERE') {
    console.warn('Gemini API key not configured. Using mock response with simulated streaming.')
    // Simulate streaming with mock response
    const mockResponse = `This is a mock response for the concept: "${prompt.substring(0, 50)}..."\n\nIn a production environment with a valid Gemini API key, this would provide a detailed explanation generated by Google's Gemini AI model. The response would be tailored to the specific concept and difficulty level you selected.`
    
    // Simulate streaming by splitting the response into chunks
    const chunks = mockResponse.split(' ');
    let accumulatedResponse = '';
    
    for (let i = 0; i < chunks.length; i++) {
      // Add a small delay to simulate streaming (reduced delay for better UX)
      await new Promise(resolve => setTimeout(resolve, 20));
      const chunk = chunks[i] + (i < chunks.length - 1 ? ' ' : '');
      accumulatedResponse += chunk;
      onChunk(chunk);
    }
    
    return accumulatedResponse;
  }

  try {
    // Using gemini-2.5-flash which is available
    const model = genAI.getGenerativeModel({ 
      model: "gemini-2.5-flash"
    });
    
    const result = await model.generateContentStream(prompt);
    let accumulatedResponse = '';
    
    for await (const chunk of result.stream) {
      const chunkText = chunk.text();
      accumulatedResponse += chunkText;
      onChunk(chunkText);
    }
    
    return accumulatedResponse;
  } catch (error: any) {
    console.error('Error generating content with Gemini streaming:', error)
    // Log specific error details
    if (error.message) {
      console.error('Error message:', error.message)
    }
    if (error.code) {
      console.error('Error code:', error.code)
    }
    if (error.details) {
      console.error('Error details:', error.details)
    }
    
    // Fallback to non-streaming version
    return await generateContent(prompt);
  }
}

/**
 * Explain a concept with different difficulty levels
 * @param concept The concept to explain
 * @param difficulty The difficulty level (beginner, intermediate, advanced)
 * @returns Promise with explanation
 */
export const explainConcept = async (concept: string, difficulty: 'beginner' | 'intermediate' | 'advanced'): Promise<string> => {
  const prompts = {
    beginner: `Explain "${concept}" in a simple and easy-to-understand way. Use everyday language and avoid technical jargon. Provide clear examples that a beginner would understand. Keep the explanation concise but thorough.`,
    intermediate: `Explain "${concept}" in a detailed but accessible way. Include key concepts, principles, and applications. Use technical terms when necessary but define them clearly. Provide examples that illustrate the concept in practice.`,
    advanced: `Provide a comprehensive and in-depth explanation of "${concept}". Include advanced concepts, technical details, theoretical foundations, and real-world applications. Discuss nuances, limitations, and current developments in the field. Include relevant formulas, diagrams, or technical specifications where appropriate.`
  }

  const prompt = prompts[difficulty]
  return await generateContent(prompt)
}

/**
 * Explain a concept with different difficulty levels using streaming
 * @param concept The concept to explain
 * @param difficulty The difficulty level (beginner, intermediate, advanced)
 * @param onChunk Callback function to handle each chunk of streaming response
 * @returns Promise with complete explanation
 */
export const explainConceptStream = async (
  concept: string, 
  difficulty: 'beginner' | 'intermediate' | 'advanced',
  onChunk: (chunk: string) => void
): Promise<string> => {
  const prompts = {
    beginner: `Explain "${concept}" in a simple and easy-to-understand way. Use everyday language and avoid technical jargon. Provide clear examples that a beginner would understand. Keep the explanation concise but thorough.`,
    intermediate: `Explain "${concept}" in a detailed but accessible way. Include key concepts, principles, and applications. Use technical terms when necessary but define them clearly. Provide examples that illustrate the concept in practice.`,
    advanced: `Provide a comprehensive and in-depth explanation of "${concept}". Include advanced concepts, technical details, theoretical foundations, and real-world applications. Discuss nuances, limitations, and current developments in the field. Include relevant formulas, diagrams, or technical specifications where appropriate.`
  }

  const prompt = prompts[difficulty]
  return await generateContentStream(prompt, onChunk)
}

/**
 * Generate related sources and materials for a concept
 * @param concept The concept to find sources for
 * @returns Promise with related sources
 */
export const generateRelatedSources = async (concept: string): Promise<string> => {
  const prompt = `Provide a list of 3-5 high-quality learning resources for "${concept}". Include:
1. A brief textbook or course recommendation
2. A reputable online article or tutorial
3. A video lecture or educational video
4. An interactive tool or simulation (if applicable)
5. A practice exercise or quiz (if applicable)

Format the response as a clear list with brief descriptions for each resource.`
  
  return await generateContent(prompt)
}

/**
 * Generate related sources and materials for a concept using streaming
 * @param concept The concept to find sources for
 * @param onChunk Callback function to handle each chunk of streaming response
 * @returns Promise with complete related sources
 */
export const generateRelatedSourcesStream = async (
  concept: string, 
  onChunk: (chunk: string) => void
): Promise<string> => {
  const prompt = `Provide a list of 3-5 high-quality learning resources for "${concept}". Include:
1. A brief textbook or course recommendation
2. A reputable online article or tutorial
3. A video lecture or educational video
4. An interactive tool or simulation (if applicable)
5. A practice exercise or quiz (if applicable)

Format the response as a clear list with brief descriptions for each resource.`
  
  // Check if API key is available
  if (!API_KEY || API_KEY === 'YOUR_GEMINI_API_KEY_HERE') {
    console.warn('Gemini API key not configured. Using mock response with simulated streaming for sources.')
    // Simulate streaming with mock response for sources
    const mockResponse = `Here are some high-quality learning resources for "${concept}":

1. Textbook: "Mastering ${concept}" - A comprehensive guide covering fundamental to advanced concepts with practical examples.

2. Online Tutorial: Interactive ${concept} course on Coursera with hands-on projects and expert instruction.

3. Video Lecture: MIT OpenCourseWare lecture series on ${concept} with detailed explanations and real-world applications.

4. Interactive Tool: ${concept} Simulator - A web-based tool that allows you to experiment with different concepts and see real-time results.

5. Practice Exercise: ${concept} Quiz - Test your knowledge with our adaptive quiz system that adjusts difficulty based on your performance.`
    
    // Simulate streaming by splitting the response into chunks
    const chunks = mockResponse.split(' ');
    let accumulatedResponse = '';
    
    for (let i = 0; i < chunks.length; i++) {
      // Add a small delay to simulate streaming (reduced delay for better UX)
      await new Promise(resolve => setTimeout(resolve, 20));
      const chunk = chunks[i] + (i < chunks.length - 1 ? ' ' : '');
      accumulatedResponse += chunk;
      onChunk(chunk);
    }
    
    return accumulatedResponse;
  }
  
  return await generateContentStream(prompt, onChunk)
}

export default {
  generateContent,
  generateContentStream,
  explainConcept,
  explainConceptStream,
  generateRelatedSources,
  generateRelatedSourcesStream
}