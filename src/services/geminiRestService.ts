// Gemini REST API Service
const API_KEY = import.meta.env.VITE_GEMINI_API_KEY || 'YOUR_GEMINI_API_KEY_HERE'
// Updated to use gemini-2.5-flash which is available
const BASE_URL = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent'

/**
 * Generate content using Gemini REST API
 * @param prompt The prompt to send to Gemini
 * @returns Promise with generated content
 */
export const generateContent = async (prompt: string): Promise<string> => {
  // Check if API key is available
  if (!API_KEY || API_KEY === 'YOUR_GEMINI_API_KEY_HERE') {
    console.warn('Gemini API key not configured. Using mock response.')
    // Return a more detailed mock response for development
    return `This is a mock response for the concept: "${prompt.substring(0, 50)}..."\n\nIn a production environment with a valid Gemini API key, this would provide a detailed explanation generated by Google's Gemini AI model. The response would be tailored to the specific concept and difficulty level you selected.`
  }

  try {
    const response = await fetch(`${BASE_URL}?key=${API_KEY}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        contents: [
          {
            parts: [
              {
                text: prompt
              }
            ]
          }
        ],
        generationConfig: {
          // Note: thinkingConfig with thinkingBudget is not a standard parameter
          // Using standard generation config options instead
          temperature: 0.7,
          topK: 40,
          topP: 0.95,
          maxOutputTokens: 8192,
        }
      })
    })

    if (!response.ok) {
      throw new Error(`Gemini API error: ${response.status} - ${response.statusText}`)
    }

    const data = await response.json()
    
    if (data.candidates && data.candidates.length > 0) {
      return data.candidates[0].content.parts[0].text
    } else {
      throw new Error('No content generated by Gemini API')
    }
  } catch (error) {
    console.error('Error generating content with Gemini:', error)
    // Return a mock response even in case of errors for better UX
    return `We encountered an issue connecting to the AI service. This is a mock response for the concept: "${prompt.substring(0, 50)}..."\n\nIn a production environment with a valid Gemini API key, this would provide a detailed explanation generated by Google's Gemini AI model.`
  }
}

/**
 * Explain a concept with different difficulty levels
 * @param concept The concept to explain
 * @param difficulty The difficulty level (beginner, intermediate, advanced)
 * @returns Promise with explanation
 */
export const explainConcept = async (concept: string, difficulty: 'beginner' | 'intermediate' | 'advanced'): Promise<string> => {
  const prompts = {
    beginner: `Explain "${concept}" in a simple and easy-to-understand way. Use everyday language and avoid technical jargon. Provide clear examples that a beginner would understand. Keep the explanation concise but thorough.`,
    intermediate: `Explain "${concept}" in a detailed but accessible way. Include key concepts, principles, and applications. Use technical terms when necessary but define them clearly. Provide examples that illustrate the concept in practice.`,
    advanced: `Provide a comprehensive and in-depth explanation of "${concept}". Include advanced concepts, technical details, theoretical foundations, and real-world applications. Discuss nuances, limitations, and current developments in the field. Include relevant formulas, diagrams, or technical specifications where appropriate.`
  }

  const prompt = prompts[difficulty]
  return await generateContent(prompt)
}

/**
 * Generate related sources and materials for a concept
 * @param concept The concept to find sources for
 * @returns Promise with related sources
 */
export const generateRelatedSources = async (concept: string): Promise<string> => {
  const prompt = `Provide a list of 3-5 high-quality learning resources for "${concept}". Include:
1. A brief textbook or course recommendation
2. A reputable online article or tutorial
3. A video lecture or educational video
4. An interactive tool or simulation (if applicable)
5. A practice exercise or quiz (if applicable)

Format the response as a clear list with brief descriptions for each resource.`
  
  return await generateContent(prompt)
}

export default {
  generateContent,
  explainConcept,
  generateRelatedSources
}